   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 115               	.global	InitButterfly
 117               	InitButterfly:
 118               		.stabd	46,0,0
   1:main.c        **** /* Name: main.c
   2:main.c        ****  * Author: Kiral Poon
   3:main.c        ****  * Copyright: All copyright belongs to author
   4:main.c        ****  * License:  normal public license
   5:main.c        ****  * Freq_ref: http://www.phy.mtu.edu/~suits/notefreqs.html
   6:main.c        ****  */
   7:main.c        **** 
   8:main.c        **** #include <avr/io.h>
   9:main.c        **** #include <avr/interrupt.h>
  10:main.c        **** #include <util/delay.h>
  11:main.c        **** #include <lcd_functions.h>
  12:main.c        **** #include <lcd_driver.h>
  13:main.c        **** 
  14:main.c        **** #include <stdio.h>
  15:main.c        **** #include <inttypes.h>
  16:main.c        **** 
  17:main.c        **** int InitButterfly( void );
  18:main.c        **** int InitSound( void );
  19:main.c        **** #define beat 160 //default 500
  20:main.c        **** #define volume 500 //default 500
  21:main.c        **** int
  22:main.c        **** InitButterfly( void )
  23:main.c        **** {
 120               	.LM0:
 121               	.LFBB1:
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
  24:main.c        ****   PCMSK0 = 0x00;
 127               	.LM1:
 128 0000 1092 6B00 		sts 107,__zero_reg__
  25:main.c        ****   PCMSK1 = 0x00;
 130               	.LM2:
 131 0004 1092 6C00 		sts 108,__zero_reg__
  26:main.c        **** 
  27:main.c        ****   DIDR0 = 0x00;
 133               	.LM3:
 134 0008 1092 7E00 		sts 126,__zero_reg__
  28:main.c        ****   DIDR1 = 0x00;
 136               	.LM4:
 137 000c 1092 7F00 		sts 127,__zero_reg__
  29:main.c        ****   return 0;
  30:main.c        **** }
 139               	.LM5:
 140 0010 80E0      		ldi r24,0
 141 0012 90E0      		ldi r25,0
 142 0014 0895      		ret
 144               	.Lscope1:
 146               		.stabd	78,0,0
 148               	.global	InitSound
 150               	InitSound:
 151               		.stabd	46,0,0
  31:main.c        **** 
  32:main.c        **** int
  33:main.c        **** InitSound( void )
  34:main.c        **** {
 153               	.LM6:
 154               	.LFBB2:
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
  35:main.c        ****   // Enable PortB5 output
  36:main.c        ****   DDRB = DDRB | ( 1 << PB5 );
 160               	.LM7:
 161 0016 259A      		sbi 0x4,5
  37:main.c        ****   // Set output pin Port B5 to 0
  38:main.c        ****   PORTB = ( PORTB & ( ~ ( 1 << PB5 ) ) ) | ( 0 << PB5 );
 163               	.LM8:
 164 0018 2D98      		cbi 0x5,5
  39:main.c        ****   // Enable output compare toggle mode
  40:main.c        ****   TCCR1A = ( TCCR1A & (~ ( ( 1 << COM1A1 ) | (1 << COM1A0) ) ) ) | ( ( 1 << COM1A1 ) | ( 0 << COM1A
 166               	.LM9:
 167 001a A0E8      		ldi r26,lo8(-128)
 168 001c B0E0      		ldi r27,0
 169 001e 8C91      		ld r24,X
 170 0020 8F73      		andi r24,lo8(63)
 171 0022 8068      		ori r24,lo8(-128)
 172 0024 8C93      		st X,r24
  41:main.c        ****   // Enable phase and frequency correct mode, WGM=1000
  42:main.c        ****   TCCR1B = ( TCCR1B & (~ ( ( 1 << WGM13 ) | (1 << WGM12) ) ) ) | ( ( 1 << WGM13 ) | ( 0 << WGM12 ) 
 174               	.LM10:
 175 0026 E1E8      		ldi r30,lo8(-127)
 176 0028 F0E0      		ldi r31,0
 177 002a 8081      		ld r24,Z
 178 002c 877E      		andi r24,lo8(-25)
 179 002e 8061      		ori r24,lo8(16)
 180 0030 8083      		st Z,r24
  43:main.c        ****   TCCR1A = ( TCCR1A & (~ ( ( 1 << WGM11 ) | (1 << WGM10) ) ) ) | ( ( 0 << WGM11 ) | ( 0 << WGM10 ) 
 182               	.LM11:
 183 0032 8C91      		ld r24,X
 184 0034 8C7F      		andi r24,lo8(-4)
 185 0036 8C93      		st X,r24
  44:main.c        **** 
  45:main.c        ****   // Set clock to prescalar of 1
  46:main.c        ****   TCCR1B = ( TCCR1B & (~ ( ( 1 << CS12 ) | ( 1 << CS11 ) | ( 1 << CS10 ) ) ) ) | ( ( 0 << CS12 ) | 
 187               	.LM12:
 188 0038 8081      		ld r24,Z
 189 003a 887F      		andi r24,lo8(-8)
 190 003c 8160      		ori r24,lo8(1)
 191 003e 8083      		st Z,r24
  47:main.c        ****   return 0;
  48:main.c        **** }
 193               	.LM13:
 194 0040 80E0      		ldi r24,0
 195 0042 90E0      		ldi r25,0
 196 0044 0895      		ret
 198               	.Lscope2:
 200               		.stabd	78,0,0
 202               	.global	noSound
 204               	noSound:
 205               		.stabd	46,0,0
  49:main.c        **** 
  50:main.c        **** int
  51:main.c        **** noSound(void)
  52:main.c        **** {
 207               	.LM14:
 208               	.LFBB3:
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 211               	/* stack size = 0 */
 212               	.L__stack_usage = 0
  53:main.c        ****   OCR1A = 0;
 214               	.LM15:
 215 0046 1092 8900 		sts 136+1,__zero_reg__
 216 004a 1092 8800 		sts 136,__zero_reg__
 217               	.LBB12:
 218               	.LBB13:
 220               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 222               	.LM16:
 223 004e 87EA      		ldi r24,lo8(24999)
 224 0050 91E6      		ldi r25,hi8(24999)
 225 0052 0197      		1: sbiw r24,1
 226 0054 01F4      		brne 1b
 227 0056 00C0      		rjmp .
 228 0058 0000      		nop
 229               	.LBE13:
 230               	.LBE12:
 232               	.Ltext2:
  54:main.c        ****   _delay_ms(50);
  55:main.c        ****   return 0;
  56:main.c        **** }
 234               	.LM17:
 235 005a 80E0      		ldi r24,0
 236 005c 90E0      		ldi r25,0
 237 005e 0895      		ret
 239               	.Lscope3:
 241               		.stabd	78,0,0
 244               	.global	my_delay_ms
 246               	my_delay_ms:
 247               		.stabd	46,0,0
  57:main.c        **** void my_delay_ms(int ms)
  58:main.c        **** {
 249               	.LM18:
 250               	.LFBB4:
 251               	/* prologue: function */
 252               	/* frame size = 0 */
 253               	/* stack size = 0 */
 254               	.L__stack_usage = 0
 255               	.L5:
  59:main.c        ****   while (0 < ms)
 257               	.LM19:
 258 0060 1816      		cp __zero_reg__,r24
 259 0062 1906      		cpc __zero_reg__,r25
 260 0064 04F4      		brge .L8
 261               	.LBB14:
 262               	.LBB15:
 264               	.Ltext3:
 266               	.LM20:
 267 0066 E3EF      		ldi r30,lo8(499)
 268 0068 F1E0      		ldi r31,hi8(499)
 269 006a 3197      		1: sbiw r30,1
 270 006c 01F4      		brne 1b
 271 006e 00C0      		rjmp .
 272 0070 0000      		nop
 273               	.LBE15:
 274               	.LBE14:
 276               	.Ltext4:
  60:main.c        ****   {  
  61:main.c        ****     _delay_ms(1);
  62:main.c        ****     --ms;
 278               	.LM21:
 279 0072 0197      		sbiw r24,1
 280 0074 00C0      		rjmp .L5
 281               	.L8:
 282               	/* epilogue start */
  63:main.c        ****   }
  64:main.c        **** }
 284               	.LM22:
 285 0076 0895      		ret
 287               	.Lscope4:
 289               		.stabd	78,0,0
 292               	.global	mute
 294               	mute:
 295               		.stabd	46,0,0
  65:main.c        **** int
  66:main.c        **** mute(int duration)
  67:main.c        **** {
 297               	.LM23:
 298               	.LFBB5:
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
  68:main.c        ****   OCR1A = 0;
 304               	.LM24:
 305 0078 1092 8900 		sts 136+1,__zero_reg__
 306 007c 1092 8800 		sts 136,__zero_reg__
  69:main.c        ****   duration= duration * beat;
  70:main.c        ****   my_delay_ms(duration);
 308               	.LM25:
 309 0080 20EA      		ldi r18,lo8(-96)
 310 0082 AC01      		movw r20,r24
 311 0084 249F      		mul r18,r20
 312 0086 C001      		movw r24,r0
 313 0088 259F      		mul r18,r21
 314 008a 900D      		add r25,r0
 315 008c 1124      		clr __zero_reg__
 316 008e 0E94 0000 		call my_delay_ms
  71:main.c        ****   return 0;
  72:main.c        **** }
 318               	.LM26:
 319 0092 80E0      		ldi r24,0
 320 0094 90E0      		ldi r25,0
 321 0096 0895      		ret
 323               	.Lscope5:
 325               		.stabd	78,0,0
 328               	.global	not_mute
 330               	not_mute:
 331               		.stabd	46,0,0
  73:main.c        **** int
  74:main.c        **** not_mute(int duration)
  75:main.c        **** {
 333               	.LM27:
 334               	.LFBB6:
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
  76:main.c        ****   OCR1A = volume;
 340               	.LM28:
 341 0098 24EF      		ldi r18,lo8(-12)
 342 009a 31E0      		ldi r19,lo8(1)
 343 009c 3093 8900 		sts 136+1,r19
 344 00a0 2093 8800 		sts 136,r18
  77:main.c        ****   duration= duration * beat;
  78:main.c        ****   my_delay_ms(duration);
 346               	.LM29:
 347 00a4 20EA      		ldi r18,lo8(-96)
 348 00a6 AC01      		movw r20,r24
 349 00a8 249F      		mul r18,r20
 350 00aa C001      		movw r24,r0
 351 00ac 259F      		mul r18,r21
 352 00ae 900D      		add r25,r0
 353 00b0 1124      		clr __zero_reg__
 354 00b2 0E94 0000 		call my_delay_ms
  79:main.c        ****   noSound();
 356               	.LM30:
 357 00b6 0E94 0000 		call noSound
  80:main.c        ****   return 0;
  81:main.c        **** }
 359               	.LM31:
 360 00ba 80E0      		ldi r24,0
 361 00bc 90E0      		ldi r25,0
 362 00be 0895      		ret
 364               	.Lscope6:
 366               		.stabd	78,0,0
 369               	.global	tone
 371               	tone:
 372               		.stabd	46,0,0
  82:main.c        **** int
  83:main.c        **** tone(uint16_t key)
  84:main.c        **** {
 374               	.LM32:
 375               	.LFBB7:
 376               	/* prologue: function */
 377               	/* frame size = 0 */
 378               	/* stack size = 0 */
 379               	.L__stack_usage = 0
  85:main.c        ****   ICR1 = key;
 381               	.LM33:
 382 00c0 9093 8700 		sts 134+1,r25
 383 00c4 8093 8600 		sts 134,r24
  86:main.c        ****   OCR1A = volume;
 385               	.LM34:
 386 00c8 84EF      		ldi r24,lo8(-12)
 387 00ca 91E0      		ldi r25,lo8(1)
 388 00cc 9093 8900 		sts 136+1,r25
 389 00d0 8093 8800 		sts 136,r24
 390               	.LBB16:
 391               	.LBB17:
 393               	.Ltext5:
 395               	.LM35:
 396 00d4 2FEF      		ldi r18,lo8(63999)
 397 00d6 89EF      		ldi r24,hi8(63999)
 398 00d8 90E0      		ldi r25,hlo8(63999)
 399 00da 2150      		1: subi r18,1
 400 00dc 8040      		sbci r24,0
 401 00de 9040      		sbci r25,0
 402 00e0 01F4      		brne 1b
 403 00e2 00C0      		rjmp .
 404 00e4 0000      		nop
 405               	.LBE17:
 406               	.LBE16:
 408               	.Ltext6:
  87:main.c        ****   _delay_ms(beat);
  88:main.c        ****   noSound();
 410               	.LM36:
 411 00e6 0E94 0000 		call noSound
  89:main.c        ****   return 0;
  90:main.c        **** }
 413               	.LM37:
 414 00ea 80E0      		ldi r24,0
 415 00ec 90E0      		ldi r25,0
 416 00ee 0895      		ret
 418               	.Lscope7:
 420               		.stabd	78,0,0
 421               		.section	.rodata.str1.1,"aMS",@progbits,1
 422               	.LC0:
 423 0000 4943 5231 		.string	"ICR1: %d"
 423      3A20 2564 
 423      00
 424               		.section	.text.startup,"ax",@progbits
 426               	.global	main
 428               	main:
 429               		.stabd	46,0,0
  91:main.c        **** #define E_329 ( (uint16_t) ( 2000000UL / (329UL*2) ) )
  92:main.c        **** #define F_349 ( (uint16_t) ( 2000000UL / (349UL*2) ) )
  93:main.c        **** #define G_392 ( (uint16_t) ( 2000000UL / (392UL*2) ) )
  94:main.c        **** #define A_440 ( (uint16_t) ( 2000000UL / (440UL*2) ) )
  95:main.c        **** #define B_494 ( (uint16_t) ( 2000000UL / (494UL*2) ) )
  96:main.c        **** #define C_523 ( (uint16_t) ( 2000000UL / (523UL*2) ) )
  97:main.c        **** #define D_587 ( (uint16_t) ( 2000000UL / (587UL*2) ) )
  98:main.c        **** #define E_659 ( (uint16_t) ( 2000000UL / (659UL*2) ) )
  99:main.c        **** int main(void)
 100:main.c        **** {
 431               	.LM38:
 432               	.LFBB8:
 433 0000 CF93      		push r28
 434 0002 DF93      		push r29
 435 0004 CDB7      		in r28,__SP_L__
 436 0006 DEB7      		in r29,__SP_H__
 437 0008 6097      		sbiw r28,16
 438 000a 0FB6      		in __tmp_reg__,__SREG__
 439 000c F894      		cli
 440 000e DEBF      		out __SP_H__,r29
 441 0010 0FBE      		out __SREG__,__tmp_reg__
 442 0012 CDBF      		out __SP_L__,r28
 443               	/* prologue: function */
 444               	/* frame size = 16 */
 445               	/* stack size = 18 */
 446               	.L__stack_usage = 18
 101:main.c        ****   cli();
 448               	.LM39:
 449               	/* #APP */
 450               	 ;  101 "main.c" 1
 451 0014 F894      		cli
 452               	 ;  0 "" 2
 102:main.c        ****   InitButterfly();
 454               	.LM40:
 455               	/* #NOAPP */
 456 0016 0E94 0000 		call InitButterfly
 103:main.c        ****   LCD_Init();
 458               	.LM41:
 459 001a 0E94 0000 		call LCD_Init
 104:main.c        ****   InitSound();
 461               	.LM42:
 462 001e 0E94 0000 		call InitSound
 105:main.c        ****   sei();
 464               	.LM43:
 465               	/* #APP */
 466               	 ;  105 "main.c" 1
 467 0022 7894      		sei
 468               	 ;  0 "" 2
 106:main.c        ****     
 107:main.c        ****   /* insert your hardware initialization here */
 108:main.c        ****   char buffer[16];
 109:main.c        ****   snprintf(buffer, sizeof(buffer), "ICR1: %d", A_440);
 470               	.LM44:
 471               	/* #NOAPP */
 472 0024 88E0      		ldi r24,lo8(8)
 473 0026 8F93      		push r24
 474 0028 80EE      		ldi r24,lo8(-32)
 475 002a 8F93      		push r24
 476 002c 80E0      		ldi r24,lo8(.LC0)
 477 002e 90E0      		ldi r25,hi8(.LC0)
 478 0030 9F93      		push r25
 479 0032 8F93      		push r24
 480 0034 1F92      		push __zero_reg__
 481 0036 80E1      		ldi r24,lo8(16)
 482 0038 8F93      		push r24
 483 003a 8E01      		movw r16,r28
 484 003c 0F5F      		subi r16,-1
 485 003e 1F4F      		sbci r17,-1
 486 0040 1F93      		push r17
 487 0042 0F93      		push r16
 488 0044 0E94 0000 		call snprintf
 110:main.c        ****   LCD_puts(buffer, 0);
 490               	.LM45:
 491 0048 60E0      		ldi r22,0
 492 004a C801      		movw r24,r16
 493 004c 0E94 0000 		call LCD_puts
 494 0050 0FB6      		in __tmp_reg__,__SREG__
 495 0052 F894      		cli
 496 0054 DEBF      		out __SP_H__,r29
 497 0056 0FBE      		out __SREG__,__tmp_reg__
 498 0058 CDBF      		out __SP_L__,r28
 111:main.c        **** 
 112:main.c        ****   for(;;)
 113:main.c        ****     {
 114:main.c        ****       
 115:main.c        ****       tone(C_523);
 116:main.c        ****       tone(C_523);
 117:main.c        ****       tone(C_523);
 118:main.c        ****       tone(C_523);
 119:main.c        ****       tone(B_494);
 120:main.c        ****       tone(A_440);
 121:main.c        ****       ICR1 = C_523;
 122:main.c        ****       OCR1A = volume;
 500               	.LM46:
 501 005a 04EF      		ldi r16,lo8(-12)
 502 005c 11E0      		ldi r17,lo8(1)
 123:main.c        ****       not_mute(4);
 124:main.c        ****       noSound();
 125:main.c        ****       mute(4);
 126:main.c        **** 
 127:main.c        ****       mute(1);
 128:main.c        ****       ICR1 = E_329;
 504               	.LM47:
 505 005e 8FED      		ldi r24,lo8(-33)
 506 0060 882E      		mov r8,r24
 507 0062 8BE0      		ldi r24,lo8(11)
 508 0064 982E      		mov r9,r24
 129:main.c        ****       OCR1A = volume;
 130:main.c        ****       _delay_ms(beat/4);
 131:main.c        ****       noSound();
 132:main.c        ****       tone(E_329);
 133:main.c        ****       mute(1);
 134:main.c        ****       tone(E_329);
 135:main.c        ****       tone(E_329);
 136:main.c        ****       tone(C_523);
 137:main.c        ****       //tone(B_494);
 138:main.c        ****       ICR1 = B_494;
 139:main.c        ****       OCR1A = volume;
 140:main.c        ****       not_mute(5);
 141:main.c        ****       noSound();
 142:main.c        ****       ICR1 = A_440;
 143:main.c        ****       OCR1A = volume;
 144:main.c        ****       not_mute(4);
 145:main.c        ****       noSound();
 146:main.c        **** 
 147:main.c        ****       //2nd
 148:main.c        ****       ICR1 = G_392;
 510               	.LM48:
 511 0066 97EF      		ldi r25,lo8(-9)
 512 0068 E92E      		mov r14,r25
 513 006a 99E0      		ldi r25,lo8(9)
 514 006c F92E      		mov r15,r25
 149:main.c        ****       OCR1A = volume;
 150:main.c        ****       not_mute(5);
 151:main.c        ****       noSound();
 152:main.c        ****       ICR1 = F_349;
 516               	.LM49:
 517 006e 21E3      		ldi r18,lo8(49)
 518 0070 A22E      		mov r10,r18
 519 0072 2BE0      		ldi r18,lo8(11)
 520 0074 B22E      		mov r11,r18
 153:main.c        ****       OCR1A = volume;
 154:main.c        ****       not_mute(4);
 155:main.c        ****       noSound();
 156:main.c        **** 
 157:main.c        ****       ICR1 = G_392;
 158:main.c        ****       OCR1A = volume;
 159:main.c        ****       not_mute(5);
 160:main.c        ****       noSound();
 161:main.c        ****       ICR1 = D_587;
 522               	.LM50:
 523 0076 37EA      		ldi r19,lo8(-89)
 524 0078 C32E      		mov r12,r19
 525 007a 36E0      		ldi r19,lo8(6)
 526 007c D32E      		mov r13,r19
 162:main.c        ****       OCR1A = volume;
 163:main.c        ****       not_mute(4);
 164:main.c        ****       noSound();
 165:main.c        **** 
 166:main.c        ****       ICR1 = G_392;
 167:main.c        ****       OCR1A = volume;
 168:main.c        ****       not_mute(5);
 169:main.c        ****       noSound();
 170:main.c        ****       ICR1 = D_587;
 171:main.c        ****       OCR1A = volume;
 172:main.c        ****       not_mute(4);
 173:main.c        ****       noSound();
 174:main.c        **** 
 175:main.c        ****       ICR1 = E_659;
 528               	.LM51:
 529 007e 4DEE      		ldi r20,lo8(-19)
 530 0080 642E      		mov r6,r20
 531 0082 45E0      		ldi r20,lo8(5)
 532 0084 742E      		mov r7,r20
 533               	.L13:
 115:main.c        ****       tone(C_523);
 535               	.LM52:
 536 0086 88E7      		ldi r24,lo8(120)
 537 0088 97E0      		ldi r25,lo8(7)
 538 008a 0E94 0000 		call tone
 116:main.c        ****       tone(C_523);
 540               	.LM53:
 541 008e 88E7      		ldi r24,lo8(120)
 542 0090 97E0      		ldi r25,lo8(7)
 543 0092 0E94 0000 		call tone
 117:main.c        ****       tone(C_523);
 545               	.LM54:
 546 0096 88E7      		ldi r24,lo8(120)
 547 0098 97E0      		ldi r25,lo8(7)
 548 009a 0E94 0000 		call tone
 118:main.c        ****       tone(C_523);
 550               	.LM55:
 551 009e 88E7      		ldi r24,lo8(120)
 552 00a0 97E0      		ldi r25,lo8(7)
 553 00a2 0E94 0000 		call tone
 119:main.c        ****       tone(B_494);
 555               	.LM56:
 556 00a6 88EE      		ldi r24,lo8(-24)
 557 00a8 97E0      		ldi r25,lo8(7)
 558 00aa 0E94 0000 		call tone
 120:main.c        ****       tone(A_440);
 560               	.LM57:
 561 00ae 80EE      		ldi r24,lo8(-32)
 562 00b0 98E0      		ldi r25,lo8(8)
 563 00b2 0E94 0000 		call tone
 121:main.c        ****       ICR1 = C_523;
 565               	.LM58:
 566 00b6 88E7      		ldi r24,lo8(120)
 567 00b8 97E0      		ldi r25,lo8(7)
 568 00ba 9093 8700 		sts 134+1,r25
 569 00be 8093 8600 		sts 134,r24
 122:main.c        ****       OCR1A = volume;
 571               	.LM59:
 572 00c2 1093 8900 		sts 136+1,r17
 573 00c6 0093 8800 		sts 136,r16
 123:main.c        ****       not_mute(4);
 575               	.LM60:
 576 00ca 84E0      		ldi r24,lo8(4)
 577 00cc 90E0      		ldi r25,0
 578 00ce 0E94 0000 		call not_mute
 124:main.c        ****       noSound();
 580               	.LM61:
 581 00d2 0E94 0000 		call noSound
 125:main.c        ****       mute(4);
 583               	.LM62:
 584 00d6 84E0      		ldi r24,lo8(4)
 585 00d8 90E0      		ldi r25,0
 586 00da 0E94 0000 		call mute
 127:main.c        ****       mute(1);
 588               	.LM63:
 589 00de 81E0      		ldi r24,lo8(1)
 590 00e0 90E0      		ldi r25,0
 591 00e2 0E94 0000 		call mute
 128:main.c        ****       ICR1 = E_329;
 593               	.LM64:
 594 00e6 9092 8700 		sts 134+1,r9
 595 00ea 8092 8600 		sts 134,r8
 129:main.c        ****       OCR1A = volume;
 597               	.LM65:
 598 00ee 1093 8900 		sts 136+1,r17
 599 00f2 0093 8800 		sts 136,r16
 600               	.LBB18:
 601               	.LBB19:
 603               	.Ltext7:
 605               	.LM66:
 606 00f6 8FE1      		ldi r24,lo8(19999)
 607 00f8 9EE4      		ldi r25,hi8(19999)
 608 00fa 0197      		1: sbiw r24,1
 609 00fc 01F4      		brne 1b
 610 00fe 00C0      		rjmp .
 611 0100 0000      		nop
 612               	.LBE19:
 613               	.LBE18:
 615               	.Ltext8:
 131:main.c        ****       noSound();
 617               	.LM67:
 618 0102 0E94 0000 		call noSound
 132:main.c        ****       tone(E_329);
 620               	.LM68:
 621 0106 8FED      		ldi r24,lo8(-33)
 622 0108 9BE0      		ldi r25,lo8(11)
 623 010a 0E94 0000 		call tone
 133:main.c        ****       mute(1);
 625               	.LM69:
 626 010e 81E0      		ldi r24,lo8(1)
 627 0110 90E0      		ldi r25,0
 628 0112 0E94 0000 		call mute
 134:main.c        ****       tone(E_329);
 630               	.LM70:
 631 0116 8FED      		ldi r24,lo8(-33)
 632 0118 9BE0      		ldi r25,lo8(11)
 633 011a 0E94 0000 		call tone
 135:main.c        ****       tone(E_329);
 635               	.LM71:
 636 011e 8FED      		ldi r24,lo8(-33)
 637 0120 9BE0      		ldi r25,lo8(11)
 638 0122 0E94 0000 		call tone
 136:main.c        ****       tone(C_523);
 640               	.LM72:
 641 0126 88E7      		ldi r24,lo8(120)
 642 0128 97E0      		ldi r25,lo8(7)
 643 012a 0E94 0000 		call tone
 138:main.c        ****       ICR1 = B_494;
 645               	.LM73:
 646 012e 88EE      		ldi r24,lo8(-24)
 647 0130 97E0      		ldi r25,lo8(7)
 648 0132 9093 8700 		sts 134+1,r25
 649 0136 8093 8600 		sts 134,r24
 139:main.c        ****       OCR1A = volume;
 651               	.LM74:
 652 013a 1093 8900 		sts 136+1,r17
 653 013e 0093 8800 		sts 136,r16
 140:main.c        ****       not_mute(5);
 655               	.LM75:
 656 0142 85E0      		ldi r24,lo8(5)
 657 0144 90E0      		ldi r25,0
 658 0146 0E94 0000 		call not_mute
 141:main.c        ****       noSound();
 660               	.LM76:
 661 014a 0E94 0000 		call noSound
 142:main.c        ****       ICR1 = A_440;
 663               	.LM77:
 664 014e 80EE      		ldi r24,lo8(-32)
 665 0150 98E0      		ldi r25,lo8(8)
 666 0152 9093 8700 		sts 134+1,r25
 667 0156 8093 8600 		sts 134,r24
 143:main.c        ****       OCR1A = volume;
 669               	.LM78:
 670 015a 1093 8900 		sts 136+1,r17
 671 015e 0093 8800 		sts 136,r16
 144:main.c        ****       not_mute(4);
 673               	.LM79:
 674 0162 84E0      		ldi r24,lo8(4)
 675 0164 90E0      		ldi r25,0
 676 0166 0E94 0000 		call not_mute
 145:main.c        ****       noSound();
 678               	.LM80:
 679 016a 0E94 0000 		call noSound
 148:main.c        ****       ICR1 = G_392;
 681               	.LM81:
 682 016e F092 8700 		sts 134+1,r15
 683 0172 E092 8600 		sts 134,r14
 149:main.c        ****       OCR1A = volume;
 685               	.LM82:
 686 0176 1093 8900 		sts 136+1,r17
 687 017a 0093 8800 		sts 136,r16
 150:main.c        ****       not_mute(5);
 689               	.LM83:
 690 017e 85E0      		ldi r24,lo8(5)
 691 0180 90E0      		ldi r25,0
 692 0182 0E94 0000 		call not_mute
 151:main.c        ****       noSound();
 694               	.LM84:
 695 0186 0E94 0000 		call noSound
 152:main.c        ****       ICR1 = F_349;
 697               	.LM85:
 698 018a B092 8700 		sts 134+1,r11
 699 018e A092 8600 		sts 134,r10
 153:main.c        ****       OCR1A = volume;
 701               	.LM86:
 702 0192 1093 8900 		sts 136+1,r17
 703 0196 0093 8800 		sts 136,r16
 154:main.c        ****       not_mute(4);
 705               	.LM87:
 706 019a 84E0      		ldi r24,lo8(4)
 707 019c 90E0      		ldi r25,0
 708 019e 0E94 0000 		call not_mute
 155:main.c        ****       noSound();
 710               	.LM88:
 711 01a2 0E94 0000 		call noSound
 157:main.c        ****       ICR1 = G_392;
 713               	.LM89:
 714 01a6 F092 8700 		sts 134+1,r15
 715 01aa E092 8600 		sts 134,r14
 158:main.c        ****       OCR1A = volume;
 717               	.LM90:
 718 01ae 1093 8900 		sts 136+1,r17
 719 01b2 0093 8800 		sts 136,r16
 159:main.c        ****       not_mute(5);
 721               	.LM91:
 722 01b6 85E0      		ldi r24,lo8(5)
 723 01b8 90E0      		ldi r25,0
 724 01ba 0E94 0000 		call not_mute
 160:main.c        ****       noSound();
 726               	.LM92:
 727 01be 0E94 0000 		call noSound
 161:main.c        ****       ICR1 = D_587;
 729               	.LM93:
 730 01c2 D092 8700 		sts 134+1,r13
 731 01c6 C092 8600 		sts 134,r12
 162:main.c        ****       OCR1A = volume;
 733               	.LM94:
 734 01ca 1093 8900 		sts 136+1,r17
 735 01ce 0093 8800 		sts 136,r16
 163:main.c        ****       not_mute(4);
 737               	.LM95:
 738 01d2 84E0      		ldi r24,lo8(4)
 739 01d4 90E0      		ldi r25,0
 740 01d6 0E94 0000 		call not_mute
 164:main.c        ****       noSound();
 742               	.LM96:
 743 01da 0E94 0000 		call noSound
 166:main.c        ****       ICR1 = G_392;
 745               	.LM97:
 746 01de F092 8700 		sts 134+1,r15
 747 01e2 E092 8600 		sts 134,r14
 167:main.c        ****       OCR1A = volume;
 749               	.LM98:
 750 01e6 1093 8900 		sts 136+1,r17
 751 01ea 0093 8800 		sts 136,r16
 168:main.c        ****       not_mute(5);
 753               	.LM99:
 754 01ee 85E0      		ldi r24,lo8(5)
 755 01f0 90E0      		ldi r25,0
 756 01f2 0E94 0000 		call not_mute
 169:main.c        ****       noSound();
 758               	.LM100:
 759 01f6 0E94 0000 		call noSound
 170:main.c        ****       ICR1 = D_587;
 761               	.LM101:
 762 01fa D092 8700 		sts 134+1,r13
 763 01fe C092 8600 		sts 134,r12
 171:main.c        ****       OCR1A = volume;
 765               	.LM102:
 766 0202 1093 8900 		sts 136+1,r17
 767 0206 0093 8800 		sts 136,r16
 172:main.c        ****       not_mute(4);
 769               	.LM103:
 770 020a 84E0      		ldi r24,lo8(4)
 771 020c 90E0      		ldi r25,0
 772 020e 0E94 0000 		call not_mute
 173:main.c        ****       noSound();
 774               	.LM104:
 775 0212 0E94 0000 		call noSound
 777               	.LM105:
 778 0216 7092 8700 		sts 134+1,r7
 779 021a 6092 8600 		sts 134,r6
 176:main.c        ****       OCR1A = volume;
 781               	.LM106:
 782 021e 1093 8900 		sts 136+1,r17
 783 0222 0093 8800 		sts 136,r16
 784               	.LBB20:
 785               	.LBB21:
 787               	.Ltext9:
 789               	.LM107:
 790 0226 8FE1      		ldi r24,lo8(19999)
 791 0228 9EE4      		ldi r25,hi8(19999)
 792 022a 0197      		1: sbiw r24,1
 793 022c 01F4      		brne 1b
 794 022e 00C0      		rjmp .
 795 0230 0000      		nop
 796               	.LBE21:
 797               	.LBE20:
 799               	.Ltext10:
 177:main.c        ****       _delay_ms(beat/4);
 178:main.c        ****       noSound();
 801               	.LM108:
 802 0232 0E94 0000 		call noSound
 179:main.c        ****       tone(D_587);
 804               	.LM109:
 805 0236 87EA      		ldi r24,lo8(-89)
 806 0238 96E0      		ldi r25,lo8(6)
 807 023a 0E94 0000 		call tone
 180:main.c        ****       tone(C_523);
 809               	.LM110:
 810 023e 88E7      		ldi r24,lo8(120)
 811 0240 97E0      		ldi r25,lo8(7)
 812 0242 0E94 0000 		call tone
 181:main.c        ****       ICR1 = B_494;
 814               	.LM111:
 815 0246 88EE      		ldi r24,lo8(-24)
 816 0248 97E0      		ldi r25,lo8(7)
 817 024a 9093 8700 		sts 134+1,r25
 818 024e 8093 8600 		sts 134,r24
 182:main.c        ****       OCR1A = volume;
 820               	.LM112:
 821 0252 1093 8900 		sts 136+1,r17
 822 0256 0093 8800 		sts 136,r16
 183:main.c        ****       not_mute(4);
 824               	.LM113:
 825 025a 84E0      		ldi r24,lo8(4)
 826 025c 90E0      		ldi r25,0
 827 025e 0E94 0000 		call not_mute
 184:main.c        ****       noSound();
 829               	.LM114:
 830 0262 0E94 0000 		call noSound
 185:main.c        ****       ICR1 = C_523;
 832               	.LM115:
 833 0266 88E7      		ldi r24,lo8(120)
 834 0268 97E0      		ldi r25,lo8(7)
 835 026a 9093 8700 		sts 134+1,r25
 836 026e 8093 8600 		sts 134,r24
 186:main.c        ****       OCR1A = volume;
 838               	.LM116:
 839 0272 1093 8900 		sts 136+1,r17
 840 0276 0093 8800 		sts 136,r16
 187:main.c        ****       not_mute(5);
 842               	.LM117:
 843 027a 85E0      		ldi r24,lo8(5)
 844 027c 90E0      		ldi r25,0
 845 027e 0E94 0000 		call not_mute
 188:main.c        ****       noSound();
 847               	.LM118:
 848 0282 0E94 0000 		call noSound
 189:main.c        **** 
 190:main.c        ****       //end
 191:main.c        ****       mute(8);
 850               	.LM119:
 851 0286 88E0      		ldi r24,lo8(8)
 852 0288 90E0      		ldi r25,0
 853 028a 0E94 0000 		call mute
 854 028e 00C0      		rjmp .L13
 859               	.Lscope8:
 861               		.stabd	78,0,0
 862               		.text
 864               	.Letext0:
 865               		.ident	"GCC: (GNU) 4.8.2"
 866               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4szIXo.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4szIXo.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4szIXo.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4szIXo.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4szIXo.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4szIXo.s:117    .text:0000000000000000 InitButterfly
     /tmp/cc4szIXo.s:150    .text:0000000000000016 InitSound
     /tmp/cc4szIXo.s:204    .text:0000000000000046 noSound
     /tmp/cc4szIXo.s:246    .text:0000000000000060 my_delay_ms
     /tmp/cc4szIXo.s:294    .text:0000000000000078 mute
     /tmp/cc4szIXo.s:330    .text:0000000000000098 not_mute
     /tmp/cc4szIXo.s:371    .text:00000000000000c0 tone
     /tmp/cc4szIXo.s:428    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
LCD_Init
snprintf
LCD_puts
__do_copy_data
