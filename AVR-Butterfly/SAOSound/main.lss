
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000af6  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080010c  0080010c  00000b96  2**0
                  ALLOC
  3 .stab         00001a04  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001638  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_22>

0000005c <LCD_character_table>:
  5c:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e6 ef       	ldi	r30, 0xF6	; 246
  dc:	fa e0       	ldi	r31, 0x0A	; 10
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	ac 30       	cpi	r26, 0x0C	; 12
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	ac e0       	ldi	r26, 0x0C	; 12
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	af 33       	cpi	r26, 0x3F	; 63
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <main>
  fe:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <InitButterfly>:
int InitSound( void );

int
InitButterfly( void )
{
  PCMSK0 = 0x00;
 106:	10 92 6b 00 	sts	0x006B, r1
  PCMSK1 = 0x00;
 10a:	10 92 6c 00 	sts	0x006C, r1

  DIDR0 = 0x00;
 10e:	10 92 7e 00 	sts	0x007E, r1
  DIDR1 = 0x00;
 112:	10 92 7f 00 	sts	0x007F, r1
  return 0;
}
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret

0000011c <InitSound>:

int
InitSound( void )
{
  // Enable PortB5 output
  DDRB = DDRB | ( 1 << PB5 );
 11c:	25 9a       	sbi	0x04, 5	; 4
  // Set output pin Port B5 to 0
  PORTB = ( PORTB & ( ~ ( 1 << PB5 ) ) ) | ( 0 << PB5 );
 11e:	2d 98       	cbi	0x05, 5	; 5
  // Enable output compare toggle mode
  TCCR1A = ( TCCR1A & (~ ( ( 1 << COM1A1 ) | (1 << COM1A0) ) ) ) | ( ( 1 << COM1A1 ) | ( 0 << COM1A0 ) );
 120:	a0 e8       	ldi	r26, 0x80	; 128
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	8c 91       	ld	r24, X
 126:	8f 73       	andi	r24, 0x3F	; 63
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24
  // Enable phase and frequency correct mode, WGM=1000
  TCCR1B = ( TCCR1B & (~ ( ( 1 << WGM13 ) | (1 << WGM12) ) ) ) | ( ( 1 << WGM13 ) | ( 0 << WGM12 ) );
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	87 7e       	andi	r24, 0xE7	; 231
 134:	80 61       	ori	r24, 0x10	; 16
 136:	80 83       	st	Z, r24
  TCCR1A = ( TCCR1A & (~ ( ( 1 << WGM11 ) | (1 << WGM10) ) ) ) | ( ( 0 << WGM11 ) | ( 0 << WGM10 ) );
 138:	8c 91       	ld	r24, X
 13a:	8c 7f       	andi	r24, 0xFC	; 252
 13c:	8c 93       	st	X, r24

  // Set clock to prescalar of 1
  TCCR1B = ( TCCR1B & (~ ( ( 1 << CS12 ) | ( 1 << CS11 ) | ( 1 << CS10 ) ) ) ) | ( ( 0 << CS12 ) | ( 0 << CS11 ) | ( 1 << CS10 ) );
 13e:	80 81       	ld	r24, Z
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
  return 0;
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <CHAR2BCD2>:
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
    char high = 0;
 14c:	20 e0       	ldi	r18, 0x00	; 0
    
    
    while (input >= 10)                 // Count tens
 14e:	8a 30       	cpi	r24, 0x0A	; 10
 150:	18 f0       	brcs	.+6      	; 0x158 <CHAR2BCD2+0xc>
    {
        high++;
 152:	2f 5f       	subi	r18, 0xFF	; 255
        input -= 10;
 154:	8a 50       	subi	r24, 0x0A	; 10
 156:	fb cf       	rjmp	.-10     	; 0x14e <CHAR2BCD2+0x2>
    }

    return  (high << 4) | input;        // Add ones and return answer
 158:	90 e1       	ldi	r25, 0x10	; 16
 15a:	29 9f       	mul	r18, r25
 15c:	90 01       	movw	r18, r0
 15e:	11 24       	eor	r1, r1
}
 160:	82 2b       	or	r24, r18
 162:	08 95       	ret

00000164 <CHAR2BCD3>:
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
 164:	84 36       	cpi	r24, 0x64	; 100
 166:	40 f0       	brcs	.+16     	; 0x178 <CHAR2BCD3+0x14>
    {
        high++;
        input -= 100;
 168:	9c e9       	ldi	r25, 0x9C	; 156
 16a:	98 0f       	add	r25, r24
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
 16c:	94 36       	cpi	r25, 0x64	; 100
 16e:	38 f0       	brcs	.+14     	; 0x17e <CHAR2BCD3+0x1a>
    {
        high++;
        input -= 100;
 170:	88 5c       	subi	r24, 0xC8	; 200
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
    {
        high++;
 172:	22 e0       	ldi	r18, 0x02	; 2
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	06 c0       	rjmp	.+12     	; 0x184 <CHAR2BCD3+0x20>
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	03 c0       	rjmp	.+6      	; 0x184 <CHAR2BCD3+0x20>
        
    while (input >= 100)                // Count hundreds
 17e:	89 2f       	mov	r24, r25
    {
        high++;
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
        input -= 100;
    }

    high <<= 4;
 184:	44 e0       	ldi	r20, 0x04	; 4
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	4a 95       	dec	r20
 18c:	e1 f7       	brne	.-8      	; 0x186 <CHAR2BCD3+0x22>
    
    while (input >= 10)                 // Count tens
 18e:	8a 30       	cpi	r24, 0x0A	; 10
 190:	20 f0       	brcs	.+8      	; 0x19a <CHAR2BCD3+0x36>
    {
        high++;
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
        input -= 10;
 196:	8a 50       	subi	r24, 0x0A	; 10
 198:	fa cf       	rjmp	.-12     	; 0x18e <CHAR2BCD3+0x2a>
    }

    return  (high << 4) | input;        // Add ones and return answer
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	9a 95       	dec	r25
 1a2:	e1 f7       	brne	.-8      	; 0x19c <CHAR2BCD3+0x38>
}
 1a4:	a9 01       	movw	r20, r18
 1a6:	48 2b       	or	r20, r24
 1a8:	ca 01       	movw	r24, r20
 1aa:	08 95       	ret

000001ac <LCD_puts_f>:
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 1ac:	20 91 0f 01 	lds	r18, 0x010F
 1b0:	21 11       	cpse	r18, r1
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <LCD_puts_f>
 1b4:	a5 e2       	ldi	r26, 0x25	; 37
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	42 2f       	mov	r20, r18
 1be:	fc 01       	movw	r30, r24
 1c0:	e2 0f       	add	r30, r18
 1c2:	f3 1f       	adc	r31, r19

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 1c4:	54 91       	lpm	r21, Z
 1c6:	55 23       	and	r21, r21
 1c8:	49 f0       	breq	.+18     	; 0x1dc <LCD_puts_f+0x30>
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	2a 31       	cpi	r18, 0x1A	; 26
 1d0:	31 05       	cpc	r19, r1
 1d2:	19 f0       	breq	.+6      	; 0x1da <LCD_puts_f+0x2e>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 1d4:	e4 91       	lpm	r30, Z
 1d6:	ed 93       	st	X+, r30
 1d8:	f1 cf       	rjmp	.-30     	; 0x1bc <LCD_puts_f+0x10>
 1da:	49 e1       	ldi	r20, 0x19	; 25
    }

    gTextBuffer[i] = '\0';
 1dc:	e4 2f       	mov	r30, r20
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	eb 5d       	subi	r30, 0xDB	; 219
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	10 82       	st	Z, r1

    if (i > 6)
 1e6:	47 30       	cpi	r20, 0x07	; 7
 1e8:	48 f0       	brcs	.+18     	; 0x1fc <LCD_puts_f+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 10 01 	sts	0x0110, r24
        gScroll = 0;
 1f0:	10 92 3e 01 	sts	0x013E, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	80 93 0e 01 	sts	0x010E, r24
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <LCD_puts_f+0x58>
    }
    else
    {
        gScrollMode = 0;        
 1fc:	10 92 10 01 	sts	0x0110, r1
        gScroll = 0;
 200:	10 92 3e 01 	sts	0x013E, r1
    }

    gLCD_Update_Required = 1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 0f 01 	sts	0x010F, r24
 20a:	08 95       	ret

0000020c <LCD_puts>:
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 20c:	20 91 0f 01 	lds	r18, 0x010F
 210:	21 11       	cpse	r18, r1
 212:	fc cf       	rjmp	.-8      	; 0x20c <LCD_puts>
 214:	fc 01       	movw	r30, r24
 216:	a5 e2       	ldi	r26, 0x25	; 37
 218:	b1 e0       	ldi	r27, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 21c:	91 91       	ld	r25, Z+
 21e:	99 23       	and	r25, r25
 220:	29 f0       	breq	.+10     	; 0x22c <LCD_puts+0x20>
 222:	89 31       	cpi	r24, 0x19	; 25
 224:	19 f0       	breq	.+6      	; 0x22c <LCD_puts+0x20>
    {
        gTextBuffer[i] = pStr[i];
 226:	9d 93       	st	X+, r25
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	f8 cf       	rjmp	.-16     	; 0x21c <LCD_puts+0x10>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 22c:	e8 2f       	mov	r30, r24
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	eb 5d       	subi	r30, 0xDB	; 219
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	10 82       	st	Z, r1

    if (i > 6)
 236:	87 30       	cpi	r24, 0x07	; 7
 238:	48 f0       	brcs	.+18     	; 0x24c <LCD_puts+0x40>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 10 01 	sts	0x0110, r24
        gScroll = 0;
 240:	10 92 3e 01 	sts	0x013E, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	80 93 0e 01 	sts	0x010E, r24
 24a:	04 c0       	rjmp	.+8      	; 0x254 <LCD_puts+0x48>
    }
    else
    {
        gScrollMode = 0;        
 24c:	10 92 10 01 	sts	0x0110, r1
        gScroll = 0;
 250:	10 92 3e 01 	sts	0x013E, r1
    }

    gLCD_Update_Required = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 0f 01 	sts	0x010F, r24
 25a:	08 95       	ret

0000025c <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 25c:	89 31       	cpi	r24, 0x19	; 25
 25e:	28 f4       	brcc	.+10     	; 0x26a <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 260:	e8 2f       	mov	r30, r24
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	eb 5d       	subi	r30, 0xDB	; 219
 266:	fe 4f       	sbci	r31, 0xFE	; 254
 268:	60 83       	st	Z, r22
 26a:	08 95       	ret

0000026c <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 26c:	e5 e2       	ldi	r30, 0x25	; 37
 26e:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = ' ';
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	ee 33       	cpi	r30, 0x3E	; 62
 278:	f9 07       	cpc	r31, r25
 27a:	d9 f7       	brne	.-10     	; 0x272 <LCD_Clear+0x6>
        gTextBuffer[i] = ' ';
}
 27c:	08 95       	ret

0000027e <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 27e:	80 93 0c 01 	sts	0x010C, r24
 282:	08 95       	ret

00000284 <LCD_UpdateRequired>:
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{

    while (gLCD_Update_Required);
 284:	90 91 0f 01 	lds	r25, 0x010F
 288:	91 11       	cpse	r25, r1
 28a:	fc cf       	rjmp	.-8      	; 0x284 <LCD_UpdateRequired>
    
    gScrollMode = scrollmode;
 28c:	60 93 10 01 	sts	0x0110, r22
    gScroll = 0;
 290:	10 92 3e 01 	sts	0x013E, r1

    gLCD_Update_Required = update;
 294:	80 93 0f 01 	sts	0x010F, r24
 298:	08 95       	ret

0000029a <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 29a:	10 92 0d 01 	sts	0x010D, r1
 29e:	08 95       	ret

000002a0 <LCD_WriteDigit>:
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 2a0:	66 30       	cpi	r22, 0x06	; 6
 2a2:	a0 f5       	brcc	.+104    	; 0x30c <LCD_WriteDigit+0x6c>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 2a4:	96 ed       	ldi	r25, 0xD6	; 214
 2a6:	98 0f       	add	r25, r24
 2a8:	91 35       	cpi	r25, 0x51	; 81
 2aa:	68 f4       	brcc	.+26     	; 0x2c6 <LCD_WriteDigit+0x26>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 2ac:	81 36       	cpi	r24, 0x61	; 97
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <LCD_WriteDigit+0x12>
            c &= ~0x20;                         // if necessarry
 2b0:	8f 7d       	andi	r24, 0xDF	; 223

        c -= '*';
 2b2:	8a 52       	subi	r24, 0x2A	; 42

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	84 5a       	subi	r24, 0xA4	; 164
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	fc 01       	movw	r30, r24
 2c0:	25 91       	lpm	r18, Z+
 2c2:	34 91       	lpm	r19, Z
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <LCD_WriteDigit+0x2a>
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{

    unsigned int seg = 0x0000;                  // Holds the segment pattern
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 2ca:	a6 2f       	mov	r26, r22
 2cc:	a1 70       	andi	r26, 0x01	; 1
 2ce:	60 ff       	sbrs	r22, 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <LCD_WriteDigit+0x36>
        mask = 0x0F;                // Digit 1, 3, 5
 2d2:	7f e0       	ldi	r23, 0x0F	; 15
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <LCD_WriteDigit+0x38>
    else
        mask = 0xF0;                // Digit 0, 2, 4
 2d6:	70 ef       	ldi	r23, 0xF0	; 240

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 2d8:	66 95       	lsr	r22
 2da:	e6 2f       	mov	r30, r22
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ef 5e       	subi	r30, 0xEF	; 239
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	cf 01       	movw	r24, r30
 2e4:	44 96       	adiw	r24, 0x14	; 20

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 2e6:	52 2f       	mov	r21, r18
 2e8:	5f 70       	andi	r21, 0x0F	; 15
        seg >>= 4;
 2ea:	44 e0       	ldi	r20, 0x04	; 4
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	4a 95       	dec	r20
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <LCD_WriteDigit+0x4c>
        if (digit & 0x01)
 2f4:	aa 23       	and	r26, r26
 2f6:	11 f0       	breq	.+4      	; 0x2fc <LCD_WriteDigit+0x5c>
            nibble <<= 4;
 2f8:	52 95       	swap	r21
 2fa:	50 7f       	andi	r21, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 2fc:	40 81       	ld	r20, Z
 2fe:	47 23       	and	r20, r23
 300:	45 2b       	or	r20, r21
 302:	40 83       	st	Z, r20
        ptr += 5;
 304:	35 96       	adiw	r30, 0x05	; 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 306:	e8 17       	cp	r30, r24
 308:	f9 07       	cpc	r31, r25
 30a:	69 f7       	brne	.-38     	; 0x2e6 <LCD_WriteDigit+0x46>
 30c:	08 95       	ret

0000030e <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	81 11       	cpse	r24, r1
 312:	01 c0       	rjmp	.+2      	; 0x316 <LCD_AllSegments+0x8>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	91 95       	neg	r25
 318:	e1 e1       	ldi	r30, 0x11	; 17
 31a:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 31c:	91 93       	st	Z+, r25

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	e5 32       	cpi	r30, 0x25	; 37
 322:	f8 07       	cpc	r31, r24
 324:	d9 f7       	brne	.-10     	; 0x31c <LCD_AllSegments+0xe>
        *(LCD_Data + i) = show;
}
 326:	08 95       	ret

00000328 <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 334:	87 eb       	ldi	r24, 0xB7	; 183
 336:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 33a:	87 e0       	ldi	r24, 0x07	; 7
 33c:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 340:	e4 ee       	ldi	r30, 0xE4	; 228
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 ec       	ldi	r24, 0xC0	; 192
 346:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 348:	80 81       	ld	r24, Z
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 34e:	10 92 0f 01 	sts	0x010F, r1
 352:	08 95       	ret

00000354 <__vector_22>:
 354:	78 94       	sei
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
 382:	80 91 01 01 	lds	r24, 0x0101
 386:	81 50       	subi	r24, 0x01	; 1
 388:	80 93 01 01 	sts	0x0101, r24
 38c:	90 91 10 01 	lds	r25, 0x0110
 390:	99 23       	and	r25, r25
 392:	71 f0       	breq	.+28     	; 0x3b0 <__vector_22+0x5c>
 394:	81 11       	cpse	r24, r1
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <__vector_22+0x60>
 398:	80 91 0e 01 	lds	r24, 0x010E
 39c:	81 11       	cpse	r24, r1
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <__vector_22+0x54>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 0f 01 	sts	0x010F, r24
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <__vector_22+0x60>
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	80 93 0e 01 	sts	0x010E, r24
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <__vector_22+0x60>
 3b0:	10 92 3e 01 	sts	0x013E, r1
 3b4:	80 91 0f 01 	lds	r24, 0x010F
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	09 f0       	breq	.+2      	; 0x3be <__vector_22+0x6a>
 3bc:	51 c0       	rjmp	.+162    	; 0x460 <__vector_22+0x10c>
 3be:	f0 90 0d 01 	lds	r15, 0x010D
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	00 e0       	ldi	r16, 0x00	; 0
 3ca:	6c 2f       	mov	r22, r28
 3cc:	80 91 3e 01 	lds	r24, 0x013E
 3d0:	9e 01       	movw	r18, r28
 3d2:	28 0f       	add	r18, r24
 3d4:	31 1d       	adc	r19, r1
 3d6:	87 fd       	sbrc	r24, 7
 3d8:	3a 95       	dec	r19
 3da:	37 fd       	sbrc	r19, 7
 3dc:	15 c0       	rjmp	.+42     	; 0x408 <__vector_22+0xb4>
 3de:	11 11       	cpse	r17, r1
 3e0:	13 c0       	rjmp	.+38     	; 0x408 <__vector_22+0xb4>
 3e2:	80 91 3e 01 	lds	r24, 0x013E
 3e6:	fe 01       	movw	r30, r28
 3e8:	eb 5d       	subi	r30, 0xDB	; 219
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	87 fd       	sbrc	r24, 7
 3f2:	fa 95       	dec	r31
 3f4:	80 81       	ld	r24, Z
 3f6:	08 2f       	mov	r16, r24
 3f8:	00 1f       	adc	r16, r16
 3fa:	00 27       	eor	r16, r16
 3fc:	00 1f       	adc	r16, r16
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	21 f4       	brne	.+8      	; 0x40a <__vector_22+0xb6>
 402:	11 e0       	ldi	r17, 0x01	; 1
 404:	1c 0f       	add	r17, r28
 406:	01 c0       	rjmp	.+2      	; 0x40a <__vector_22+0xb6>
 408:	80 e2       	ldi	r24, 0x20	; 32
 40a:	00 23       	and	r16, r16
 40c:	21 f0       	breq	.+8      	; 0x416 <__vector_22+0xc2>
 40e:	34 e0       	ldi	r19, 0x04	; 4
 410:	3f 15       	cp	r19, r15
 412:	08 f4       	brcc	.+2      	; 0x416 <__vector_22+0xc2>
 414:	80 e2       	ldi	r24, 0x20	; 32
 416:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_WriteDigit>
 41a:	21 96       	adiw	r28, 0x01	; 1
 41c:	c6 30       	cpi	r28, 0x06	; 6
 41e:	d1 05       	cpc	r29, r1
 420:	a1 f6       	brne	.-88     	; 0x3ca <__vector_22+0x76>
 422:	a1 e1       	ldi	r26, 0x11	; 17
 424:	b1 e0       	ldi	r27, 0x01	; 1
 426:	ec ee       	ldi	r30, 0xEC	; 236
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	8d 91       	ld	r24, X+
 42c:	81 93       	st	Z+, r24
 42e:	e1 15       	cp	r30, r1
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	f8 07       	cpc	r31, r24
 434:	d1 f7       	brne	.-12     	; 0x42a <__vector_22+0xd6>
 436:	80 91 0c 01 	lds	r24, 0x010C
 43a:	88 23       	and	r24, r24
 43c:	21 f0       	breq	.+8      	; 0x446 <__vector_22+0xf2>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 93 f4 00 	sts	0x00F4, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <__vector_22+0xf6>
 446:	10 92 f4 00 	sts	0x00F4, r1
 44a:	11 30       	cpi	r17, 0x01	; 1
 44c:	11 f4       	brne	.+4      	; 0x452 <__vector_22+0xfe>
 44e:	8a ef       	ldi	r24, 0xFA	; 250
 450:	03 c0       	rjmp	.+6      	; 0x458 <__vector_22+0x104>
 452:	80 91 3e 01 	lds	r24, 0x013E
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	80 93 3e 01 	sts	0x013E, r24
 45c:	10 92 0f 01 	sts	0x010F, r1
 460:	80 91 01 01 	lds	r24, 0x0101
 464:	81 11       	cpse	r24, r1
 466:	03 c0       	rjmp	.+6      	; 0x46e <__vector_22+0x11a>
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	80 93 01 01 	sts	0x0101, r24
 46e:	80 91 0d 01 	lds	r24, 0x010D
 472:	8a 30       	cpi	r24, 0x0A	; 10
 474:	19 f4       	brne	.+6      	; 0x47c <__vector_22+0x128>
 476:	10 92 0d 01 	sts	0x010D, r1
 47a:	03 c0       	rjmp	.+6      	; 0x482 <__vector_22+0x12e>
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 0d 01 	sts	0x010D, r24
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	bf 91       	pop	r27
 48c:	af 91       	pop	r26
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	7f 91       	pop	r23
 494:	6f 91       	pop	r22
 496:	5f 91       	pop	r21
 498:	4f 91       	pop	r20
 49a:	3f 91       	pop	r19
 49c:	2f 91       	pop	r18
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <main>:

#define A_440 ( (uint16_t) ( 2000000UL / (440UL*2) ) )

int main(void)
{
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	60 97       	sbiw	r28, 0x10	; 16
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
  cli();
 4c2:	f8 94       	cli
  InitButterfly();
 4c4:	0e 94 83 00 	call	0x106	; 0x106 <InitButterfly>
  LCD_Init();
 4c8:	0e 94 94 01 	call	0x328	; 0x328 <LCD_Init>
  InitSound();
 4cc:	0e 94 8e 00 	call	0x11c	; 0x11c <InitSound>
  sei();
 4d0:	78 94       	sei
    
  /* insert your hardware initialization here */
  char buffer[16];
  snprintf(buffer, sizeof(buffer), "ICR1: %d", A_440);
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	8f 93       	push	r24
 4d6:	80 ee       	ldi	r24, 0xE0	; 224
 4d8:	8f 93       	push	r24
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	9f 93       	push	r25
 4e0:	8f 93       	push	r24
 4e2:	1f 92       	push	r1
 4e4:	80 e1       	ldi	r24, 0x10	; 16
 4e6:	8f 93       	push	r24
 4e8:	8e 01       	movw	r16, r28
 4ea:	0f 5f       	subi	r16, 0xFF	; 255
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
 4ee:	1f 93       	push	r17
 4f0:	0f 93       	push	r16
 4f2:	0e 94 9a 02 	call	0x534	; 0x534 <snprintf>
  LCD_puts(buffer, 0);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	c8 01       	movw	r24, r16
 4fa:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_puts>
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61

  for(;;)
    {
      
      ICR1 = A_440;
 508:	20 ee       	ldi	r18, 0xE0	; 224
 50a:	38 e0       	ldi	r19, 0x08	; 8
      OCR1A = 500;
 50c:	84 ef       	ldi	r24, 0xF4	; 244
 50e:	91 e0       	ldi	r25, 0x01	; 1
  LCD_puts(buffer, 0);

  for(;;)
    {
      
      ICR1 = A_440;
 510:	30 93 87 00 	sts	0x0087, r19
 514:	20 93 86 00 	sts	0x0086, r18
      OCR1A = 500;
 518:	90 93 89 00 	sts	0x0089, r25
 51c:	80 93 88 00 	sts	0x0088, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	5f e3       	ldi	r21, 0x3F	; 63
 522:	6d e0       	ldi	r22, 0x0D	; 13
 524:	43 e0       	ldi	r20, 0x03	; 3
 526:	51 50       	subi	r21, 0x01	; 1
 528:	60 40       	sbci	r22, 0x00	; 0
 52a:	40 40       	sbci	r20, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <__stack+0x27>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <__stack+0x31>
 530:	00 00       	nop
 532:	ee cf       	rjmp	.-36     	; 0x510 <__stack+0x11>

00000534 <snprintf>:
 534:	ae e0       	ldi	r26, 0x0E	; 14
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e0 ea       	ldi	r30, 0xA0	; 160
 53a:	f2 e0       	ldi	r31, 0x02	; 2
 53c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__prologue_saves__+0x1c>
 540:	0d 89       	ldd	r16, Y+21	; 0x15
 542:	1e 89       	ldd	r17, Y+22	; 0x16
 544:	8f 89       	ldd	r24, Y+23	; 0x17
 546:	98 8d       	ldd	r25, Y+24	; 0x18
 548:	26 e0       	ldi	r18, 0x06	; 6
 54a:	2c 83       	std	Y+4, r18	; 0x04
 54c:	1a 83       	std	Y+2, r17	; 0x02
 54e:	09 83       	std	Y+1, r16	; 0x01
 550:	97 ff       	sbrs	r25, 7
 552:	02 c0       	rjmp	.+4      	; 0x558 <snprintf+0x24>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e8       	ldi	r25, 0x80	; 128
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	9e 83       	std	Y+6, r25	; 0x06
 55c:	8d 83       	std	Y+5, r24	; 0x05
 55e:	ae 01       	movw	r20, r28
 560:	45 5e       	subi	r20, 0xE5	; 229
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	69 8d       	ldd	r22, Y+25	; 0x19
 566:	7a 8d       	ldd	r23, Y+26	; 0x1a
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	0e 94 ca 02 	call	0x594	; 0x594 <vfprintf>
 570:	4d 81       	ldd	r20, Y+5	; 0x05
 572:	5e 81       	ldd	r21, Y+6	; 0x06
 574:	57 fd       	sbrc	r21, 7
 576:	0a c0       	rjmp	.+20     	; 0x58c <snprintf+0x58>
 578:	2f 81       	ldd	r18, Y+7	; 0x07
 57a:	38 85       	ldd	r19, Y+8	; 0x08
 57c:	42 17       	cp	r20, r18
 57e:	53 07       	cpc	r21, r19
 580:	0c f4       	brge	.+2      	; 0x584 <snprintf+0x50>
 582:	9a 01       	movw	r18, r20
 584:	f8 01       	movw	r30, r16
 586:	e2 0f       	add	r30, r18
 588:	f3 1f       	adc	r31, r19
 58a:	10 82       	st	Z, r1
 58c:	2e 96       	adiw	r28, 0x0e	; 14
 58e:	e4 e0       	ldi	r30, 0x04	; 4
 590:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__epilogue_restores__+0x1c>

00000594 <vfprintf>:
 594:	ac e0       	ldi	r26, 0x0C	; 12
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	e0 ed       	ldi	r30, 0xD0	; 208
 59a:	f2 e0       	ldi	r31, 0x02	; 2
 59c:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__prologue_saves__>
 5a0:	7c 01       	movw	r14, r24
 5a2:	6b 01       	movw	r12, r22
 5a4:	8a 01       	movw	r16, r20
 5a6:	fc 01       	movw	r30, r24
 5a8:	17 82       	std	Z+7, r1	; 0x07
 5aa:	16 82       	std	Z+6, r1	; 0x06
 5ac:	83 81       	ldd	r24, Z+3	; 0x03
 5ae:	81 ff       	sbrs	r24, 1
 5b0:	bd c1       	rjmp	.+890    	; 0x92c <vfprintf+0x398>
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	4c 01       	movw	r8, r24
 5b8:	f7 01       	movw	r30, r14
 5ba:	93 81       	ldd	r25, Z+3	; 0x03
 5bc:	f6 01       	movw	r30, r12
 5be:	93 fd       	sbrc	r25, 3
 5c0:	85 91       	lpm	r24, Z+
 5c2:	93 ff       	sbrs	r25, 3
 5c4:	81 91       	ld	r24, Z+
 5c6:	6f 01       	movw	r12, r30
 5c8:	88 23       	and	r24, r24
 5ca:	09 f4       	brne	.+2      	; 0x5ce <vfprintf+0x3a>
 5cc:	ab c1       	rjmp	.+854    	; 0x924 <vfprintf+0x390>
 5ce:	85 32       	cpi	r24, 0x25	; 37
 5d0:	39 f4       	brne	.+14     	; 0x5e0 <vfprintf+0x4c>
 5d2:	93 fd       	sbrc	r25, 3
 5d4:	85 91       	lpm	r24, Z+
 5d6:	93 ff       	sbrs	r25, 3
 5d8:	81 91       	ld	r24, Z+
 5da:	6f 01       	movw	r12, r30
 5dc:	85 32       	cpi	r24, 0x25	; 37
 5de:	29 f4       	brne	.+10     	; 0x5ea <vfprintf+0x56>
 5e0:	b7 01       	movw	r22, r14
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 5e8:	e7 cf       	rjmp	.-50     	; 0x5b8 <vfprintf+0x24>
 5ea:	51 2c       	mov	r5, r1
 5ec:	31 2c       	mov	r3, r1
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	20 32       	cpi	r18, 0x20	; 32
 5f2:	a0 f4       	brcc	.+40     	; 0x61c <vfprintf+0x88>
 5f4:	8b 32       	cpi	r24, 0x2B	; 43
 5f6:	69 f0       	breq	.+26     	; 0x612 <vfprintf+0x7e>
 5f8:	30 f4       	brcc	.+12     	; 0x606 <vfprintf+0x72>
 5fa:	80 32       	cpi	r24, 0x20	; 32
 5fc:	59 f0       	breq	.+22     	; 0x614 <vfprintf+0x80>
 5fe:	83 32       	cpi	r24, 0x23	; 35
 600:	69 f4       	brne	.+26     	; 0x61c <vfprintf+0x88>
 602:	20 61       	ori	r18, 0x10	; 16
 604:	2c c0       	rjmp	.+88     	; 0x65e <vfprintf+0xca>
 606:	8d 32       	cpi	r24, 0x2D	; 45
 608:	39 f0       	breq	.+14     	; 0x618 <vfprintf+0x84>
 60a:	80 33       	cpi	r24, 0x30	; 48
 60c:	39 f4       	brne	.+14     	; 0x61c <vfprintf+0x88>
 60e:	21 60       	ori	r18, 0x01	; 1
 610:	26 c0       	rjmp	.+76     	; 0x65e <vfprintf+0xca>
 612:	22 60       	ori	r18, 0x02	; 2
 614:	24 60       	ori	r18, 0x04	; 4
 616:	23 c0       	rjmp	.+70     	; 0x65e <vfprintf+0xca>
 618:	28 60       	ori	r18, 0x08	; 8
 61a:	21 c0       	rjmp	.+66     	; 0x65e <vfprintf+0xca>
 61c:	27 fd       	sbrc	r18, 7
 61e:	27 c0       	rjmp	.+78     	; 0x66e <vfprintf+0xda>
 620:	30 ed       	ldi	r19, 0xD0	; 208
 622:	38 0f       	add	r19, r24
 624:	3a 30       	cpi	r19, 0x0A	; 10
 626:	78 f4       	brcc	.+30     	; 0x646 <vfprintf+0xb2>
 628:	26 ff       	sbrs	r18, 6
 62a:	06 c0       	rjmp	.+12     	; 0x638 <vfprintf+0xa4>
 62c:	fa e0       	ldi	r31, 0x0A	; 10
 62e:	5f 9e       	mul	r5, r31
 630:	30 0d       	add	r19, r0
 632:	11 24       	eor	r1, r1
 634:	53 2e       	mov	r5, r19
 636:	13 c0       	rjmp	.+38     	; 0x65e <vfprintf+0xca>
 638:	8a e0       	ldi	r24, 0x0A	; 10
 63a:	38 9e       	mul	r3, r24
 63c:	30 0d       	add	r19, r0
 63e:	11 24       	eor	r1, r1
 640:	33 2e       	mov	r3, r19
 642:	20 62       	ori	r18, 0x20	; 32
 644:	0c c0       	rjmp	.+24     	; 0x65e <vfprintf+0xca>
 646:	8e 32       	cpi	r24, 0x2E	; 46
 648:	21 f4       	brne	.+8      	; 0x652 <vfprintf+0xbe>
 64a:	26 fd       	sbrc	r18, 6
 64c:	6b c1       	rjmp	.+726    	; 0x924 <vfprintf+0x390>
 64e:	20 64       	ori	r18, 0x40	; 64
 650:	06 c0       	rjmp	.+12     	; 0x65e <vfprintf+0xca>
 652:	8c 36       	cpi	r24, 0x6C	; 108
 654:	11 f4       	brne	.+4      	; 0x65a <vfprintf+0xc6>
 656:	20 68       	ori	r18, 0x80	; 128
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0xca>
 65a:	88 36       	cpi	r24, 0x68	; 104
 65c:	41 f4       	brne	.+16     	; 0x66e <vfprintf+0xda>
 65e:	f6 01       	movw	r30, r12
 660:	93 fd       	sbrc	r25, 3
 662:	85 91       	lpm	r24, Z+
 664:	93 ff       	sbrs	r25, 3
 666:	81 91       	ld	r24, Z+
 668:	6f 01       	movw	r12, r30
 66a:	81 11       	cpse	r24, r1
 66c:	c1 cf       	rjmp	.-126    	; 0x5f0 <vfprintf+0x5c>
 66e:	98 2f       	mov	r25, r24
 670:	9f 7d       	andi	r25, 0xDF	; 223
 672:	95 54       	subi	r25, 0x45	; 69
 674:	93 30       	cpi	r25, 0x03	; 3
 676:	28 f4       	brcc	.+10     	; 0x682 <vfprintf+0xee>
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	ff e3       	ldi	r31, 0x3F	; 63
 67e:	f9 83       	std	Y+1, r31	; 0x01
 680:	0d c0       	rjmp	.+26     	; 0x69c <vfprintf+0x108>
 682:	83 36       	cpi	r24, 0x63	; 99
 684:	31 f0       	breq	.+12     	; 0x692 <vfprintf+0xfe>
 686:	83 37       	cpi	r24, 0x73	; 115
 688:	71 f0       	breq	.+28     	; 0x6a6 <vfprintf+0x112>
 68a:	83 35       	cpi	r24, 0x53	; 83
 68c:	09 f0       	breq	.+2      	; 0x690 <vfprintf+0xfc>
 68e:	5b c0       	rjmp	.+182    	; 0x746 <vfprintf+0x1b2>
 690:	22 c0       	rjmp	.+68     	; 0x6d6 <vfprintf+0x142>
 692:	f8 01       	movw	r30, r16
 694:	80 81       	ld	r24, Z
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	0e 5f       	subi	r16, 0xFE	; 254
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	44 24       	eor	r4, r4
 69e:	43 94       	inc	r4
 6a0:	51 2c       	mov	r5, r1
 6a2:	54 01       	movw	r10, r8
 6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <vfprintf+0x13c>
 6a6:	38 01       	movw	r6, r16
 6a8:	f2 e0       	ldi	r31, 0x02	; 2
 6aa:	6f 0e       	add	r6, r31
 6ac:	71 1c       	adc	r7, r1
 6ae:	f8 01       	movw	r30, r16
 6b0:	a0 80       	ld	r10, Z
 6b2:	b1 80       	ldd	r11, Z+1	; 0x01
 6b4:	26 ff       	sbrs	r18, 6
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <vfprintf+0x12a>
 6b8:	65 2d       	mov	r22, r5
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0x12e>
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	7f ef       	ldi	r23, 0xFF	; 255
 6c2:	c5 01       	movw	r24, r10
 6c4:	2c 87       	std	Y+12, r18	; 0x0c
 6c6:	0e 94 a7 04 	call	0x94e	; 0x94e <strnlen>
 6ca:	2c 01       	movw	r4, r24
 6cc:	83 01       	movw	r16, r6
 6ce:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d0:	2f 77       	andi	r18, 0x7F	; 127
 6d2:	22 2e       	mov	r2, r18
 6d4:	17 c0       	rjmp	.+46     	; 0x704 <vfprintf+0x170>
 6d6:	38 01       	movw	r6, r16
 6d8:	f2 e0       	ldi	r31, 0x02	; 2
 6da:	6f 0e       	add	r6, r31
 6dc:	71 1c       	adc	r7, r1
 6de:	f8 01       	movw	r30, r16
 6e0:	a0 80       	ld	r10, Z
 6e2:	b1 80       	ldd	r11, Z+1	; 0x01
 6e4:	26 ff       	sbrs	r18, 6
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <vfprintf+0x15a>
 6e8:	65 2d       	mov	r22, r5
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <vfprintf+0x15e>
 6ee:	6f ef       	ldi	r22, 0xFF	; 255
 6f0:	7f ef       	ldi	r23, 0xFF	; 255
 6f2:	c5 01       	movw	r24, r10
 6f4:	2c 87       	std	Y+12, r18	; 0x0c
 6f6:	0e 94 9c 04 	call	0x938	; 0x938 <strnlen_P>
 6fa:	2c 01       	movw	r4, r24
 6fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 6fe:	20 68       	ori	r18, 0x80	; 128
 700:	22 2e       	mov	r2, r18
 702:	83 01       	movw	r16, r6
 704:	23 fc       	sbrc	r2, 3
 706:	1b c0       	rjmp	.+54     	; 0x73e <vfprintf+0x1aa>
 708:	83 2d       	mov	r24, r3
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	48 16       	cp	r4, r24
 70e:	59 06       	cpc	r5, r25
 710:	b0 f4       	brcc	.+44     	; 0x73e <vfprintf+0x1aa>
 712:	b7 01       	movw	r22, r14
 714:	80 e2       	ldi	r24, 0x20	; 32
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 71c:	3a 94       	dec	r3
 71e:	f4 cf       	rjmp	.-24     	; 0x708 <vfprintf+0x174>
 720:	f5 01       	movw	r30, r10
 722:	27 fc       	sbrc	r2, 7
 724:	85 91       	lpm	r24, Z+
 726:	27 fe       	sbrs	r2, 7
 728:	81 91       	ld	r24, Z+
 72a:	5f 01       	movw	r10, r30
 72c:	b7 01       	movw	r22, r14
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 734:	31 10       	cpse	r3, r1
 736:	3a 94       	dec	r3
 738:	f1 e0       	ldi	r31, 0x01	; 1
 73a:	4f 1a       	sub	r4, r31
 73c:	51 08       	sbc	r5, r1
 73e:	41 14       	cp	r4, r1
 740:	51 04       	cpc	r5, r1
 742:	71 f7       	brne	.-36     	; 0x720 <vfprintf+0x18c>
 744:	e5 c0       	rjmp	.+458    	; 0x910 <vfprintf+0x37c>
 746:	84 36       	cpi	r24, 0x64	; 100
 748:	11 f0       	breq	.+4      	; 0x74e <vfprintf+0x1ba>
 74a:	89 36       	cpi	r24, 0x69	; 105
 74c:	39 f5       	brne	.+78     	; 0x79c <vfprintf+0x208>
 74e:	f8 01       	movw	r30, r16
 750:	27 ff       	sbrs	r18, 7
 752:	07 c0       	rjmp	.+14     	; 0x762 <vfprintf+0x1ce>
 754:	60 81       	ld	r22, Z
 756:	71 81       	ldd	r23, Z+1	; 0x01
 758:	82 81       	ldd	r24, Z+2	; 0x02
 75a:	93 81       	ldd	r25, Z+3	; 0x03
 75c:	0c 5f       	subi	r16, 0xFC	; 252
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	08 c0       	rjmp	.+16     	; 0x772 <vfprintf+0x1de>
 762:	60 81       	ld	r22, Z
 764:	71 81       	ldd	r23, Z+1	; 0x01
 766:	88 27       	eor	r24, r24
 768:	77 fd       	sbrc	r23, 7
 76a:	80 95       	com	r24
 76c:	98 2f       	mov	r25, r24
 76e:	0e 5f       	subi	r16, 0xFE	; 254
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	2f 76       	andi	r18, 0x6F	; 111
 774:	b2 2e       	mov	r11, r18
 776:	97 ff       	sbrs	r25, 7
 778:	09 c0       	rjmp	.+18     	; 0x78c <vfprintf+0x1f8>
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	20 68       	ori	r18, 0x80	; 128
 78a:	b2 2e       	mov	r11, r18
 78c:	2a e0       	ldi	r18, 0x0A	; 10
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a4 01       	movw	r20, r8
 792:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__ultoa_invert>
 796:	a8 2e       	mov	r10, r24
 798:	a8 18       	sub	r10, r8
 79a:	44 c0       	rjmp	.+136    	; 0x824 <vfprintf+0x290>
 79c:	85 37       	cpi	r24, 0x75	; 117
 79e:	29 f4       	brne	.+10     	; 0x7aa <vfprintf+0x216>
 7a0:	2f 7e       	andi	r18, 0xEF	; 239
 7a2:	b2 2e       	mov	r11, r18
 7a4:	2a e0       	ldi	r18, 0x0A	; 10
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	25 c0       	rjmp	.+74     	; 0x7f4 <vfprintf+0x260>
 7aa:	f2 2f       	mov	r31, r18
 7ac:	f9 7f       	andi	r31, 0xF9	; 249
 7ae:	bf 2e       	mov	r11, r31
 7b0:	8f 36       	cpi	r24, 0x6F	; 111
 7b2:	c1 f0       	breq	.+48     	; 0x7e4 <vfprintf+0x250>
 7b4:	18 f4       	brcc	.+6      	; 0x7bc <vfprintf+0x228>
 7b6:	88 35       	cpi	r24, 0x58	; 88
 7b8:	79 f0       	breq	.+30     	; 0x7d8 <vfprintf+0x244>
 7ba:	b4 c0       	rjmp	.+360    	; 0x924 <vfprintf+0x390>
 7bc:	80 37       	cpi	r24, 0x70	; 112
 7be:	19 f0       	breq	.+6      	; 0x7c6 <vfprintf+0x232>
 7c0:	88 37       	cpi	r24, 0x78	; 120
 7c2:	21 f0       	breq	.+8      	; 0x7cc <vfprintf+0x238>
 7c4:	af c0       	rjmp	.+350    	; 0x924 <vfprintf+0x390>
 7c6:	2f 2f       	mov	r18, r31
 7c8:	20 61       	ori	r18, 0x10	; 16
 7ca:	b2 2e       	mov	r11, r18
 7cc:	b4 fe       	sbrs	r11, 4
 7ce:	0d c0       	rjmp	.+26     	; 0x7ea <vfprintf+0x256>
 7d0:	8b 2d       	mov	r24, r11
 7d2:	84 60       	ori	r24, 0x04	; 4
 7d4:	b8 2e       	mov	r11, r24
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <vfprintf+0x256>
 7d8:	24 ff       	sbrs	r18, 4
 7da:	0a c0       	rjmp	.+20     	; 0x7f0 <vfprintf+0x25c>
 7dc:	9f 2f       	mov	r25, r31
 7de:	96 60       	ori	r25, 0x06	; 6
 7e0:	b9 2e       	mov	r11, r25
 7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <vfprintf+0x25c>
 7e4:	28 e0       	ldi	r18, 0x08	; 8
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <vfprintf+0x260>
 7ea:	20 e1       	ldi	r18, 0x10	; 16
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x260>
 7f0:	20 e1       	ldi	r18, 0x10	; 16
 7f2:	32 e0       	ldi	r19, 0x02	; 2
 7f4:	f8 01       	movw	r30, r16
 7f6:	b7 fe       	sbrs	r11, 7
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <vfprintf+0x274>
 7fa:	60 81       	ld	r22, Z
 7fc:	71 81       	ldd	r23, Z+1	; 0x01
 7fe:	82 81       	ldd	r24, Z+2	; 0x02
 800:	93 81       	ldd	r25, Z+3	; 0x03
 802:	0c 5f       	subi	r16, 0xFC	; 252
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	06 c0       	rjmp	.+12     	; 0x814 <vfprintf+0x280>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 5f       	subi	r16, 0xFE	; 254
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	a4 01       	movw	r20, r8
 816:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__ultoa_invert>
 81a:	a8 2e       	mov	r10, r24
 81c:	a8 18       	sub	r10, r8
 81e:	fb 2d       	mov	r31, r11
 820:	ff 77       	andi	r31, 0x7F	; 127
 822:	bf 2e       	mov	r11, r31
 824:	b6 fe       	sbrs	r11, 6
 826:	0b c0       	rjmp	.+22     	; 0x83e <vfprintf+0x2aa>
 828:	2b 2d       	mov	r18, r11
 82a:	2e 7f       	andi	r18, 0xFE	; 254
 82c:	a5 14       	cp	r10, r5
 82e:	50 f4       	brcc	.+20     	; 0x844 <vfprintf+0x2b0>
 830:	b4 fe       	sbrs	r11, 4
 832:	0a c0       	rjmp	.+20     	; 0x848 <vfprintf+0x2b4>
 834:	b2 fc       	sbrc	r11, 2
 836:	08 c0       	rjmp	.+16     	; 0x848 <vfprintf+0x2b4>
 838:	2b 2d       	mov	r18, r11
 83a:	2e 7e       	andi	r18, 0xEE	; 238
 83c:	05 c0       	rjmp	.+10     	; 0x848 <vfprintf+0x2b4>
 83e:	7a 2c       	mov	r7, r10
 840:	2b 2d       	mov	r18, r11
 842:	03 c0       	rjmp	.+6      	; 0x84a <vfprintf+0x2b6>
 844:	7a 2c       	mov	r7, r10
 846:	01 c0       	rjmp	.+2      	; 0x84a <vfprintf+0x2b6>
 848:	75 2c       	mov	r7, r5
 84a:	24 ff       	sbrs	r18, 4
 84c:	0d c0       	rjmp	.+26     	; 0x868 <vfprintf+0x2d4>
 84e:	fe 01       	movw	r30, r28
 850:	ea 0d       	add	r30, r10
 852:	f1 1d       	adc	r31, r1
 854:	80 81       	ld	r24, Z
 856:	80 33       	cpi	r24, 0x30	; 48
 858:	11 f4       	brne	.+4      	; 0x85e <vfprintf+0x2ca>
 85a:	29 7e       	andi	r18, 0xE9	; 233
 85c:	09 c0       	rjmp	.+18     	; 0x870 <vfprintf+0x2dc>
 85e:	22 ff       	sbrs	r18, 2
 860:	06 c0       	rjmp	.+12     	; 0x86e <vfprintf+0x2da>
 862:	73 94       	inc	r7
 864:	73 94       	inc	r7
 866:	04 c0       	rjmp	.+8      	; 0x870 <vfprintf+0x2dc>
 868:	82 2f       	mov	r24, r18
 86a:	86 78       	andi	r24, 0x86	; 134
 86c:	09 f0       	breq	.+2      	; 0x870 <vfprintf+0x2dc>
 86e:	73 94       	inc	r7
 870:	23 fd       	sbrc	r18, 3
 872:	13 c0       	rjmp	.+38     	; 0x89a <vfprintf+0x306>
 874:	20 ff       	sbrs	r18, 0
 876:	06 c0       	rjmp	.+12     	; 0x884 <vfprintf+0x2f0>
 878:	5a 2c       	mov	r5, r10
 87a:	73 14       	cp	r7, r3
 87c:	18 f4       	brcc	.+6      	; 0x884 <vfprintf+0x2f0>
 87e:	53 0c       	add	r5, r3
 880:	57 18       	sub	r5, r7
 882:	73 2c       	mov	r7, r3
 884:	73 14       	cp	r7, r3
 886:	68 f4       	brcc	.+26     	; 0x8a2 <vfprintf+0x30e>
 888:	b7 01       	movw	r22, r14
 88a:	80 e2       	ldi	r24, 0x20	; 32
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	2c 87       	std	Y+12, r18	; 0x0c
 890:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 894:	73 94       	inc	r7
 896:	2c 85       	ldd	r18, Y+12	; 0x0c
 898:	f5 cf       	rjmp	.-22     	; 0x884 <vfprintf+0x2f0>
 89a:	73 14       	cp	r7, r3
 89c:	10 f4       	brcc	.+4      	; 0x8a2 <vfprintf+0x30e>
 89e:	37 18       	sub	r3, r7
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <vfprintf+0x310>
 8a2:	31 2c       	mov	r3, r1
 8a4:	24 ff       	sbrs	r18, 4
 8a6:	12 c0       	rjmp	.+36     	; 0x8cc <vfprintf+0x338>
 8a8:	b7 01       	movw	r22, r14
 8aa:	80 e3       	ldi	r24, 0x30	; 48
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	2c 87       	std	Y+12, r18	; 0x0c
 8b0:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8b4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8b6:	22 ff       	sbrs	r18, 2
 8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <vfprintf+0x354>
 8ba:	21 ff       	sbrs	r18, 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x330>
 8be:	88 e5       	ldi	r24, 0x58	; 88
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x334>
 8c4:	88 e7       	ldi	r24, 0x78	; 120
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	b7 01       	movw	r22, r14
 8ca:	0c c0       	rjmp	.+24     	; 0x8e4 <vfprintf+0x350>
 8cc:	82 2f       	mov	r24, r18
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <vfprintf+0x354>
 8d2:	21 fd       	sbrc	r18, 1
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x346>
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <vfprintf+0x348>
 8da:	8b e2       	ldi	r24, 0x2B	; 43
 8dc:	27 fd       	sbrc	r18, 7
 8de:	8d e2       	ldi	r24, 0x2D	; 45
 8e0:	b7 01       	movw	r22, r14
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8e8:	a5 14       	cp	r10, r5
 8ea:	38 f4       	brcc	.+14     	; 0x8fa <vfprintf+0x366>
 8ec:	b7 01       	movw	r22, r14
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8f6:	5a 94       	dec	r5
 8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <vfprintf+0x354>
 8fa:	aa 94       	dec	r10
 8fc:	f4 01       	movw	r30, r8
 8fe:	ea 0d       	add	r30, r10
 900:	f1 1d       	adc	r31, r1
 902:	80 81       	ld	r24, Z
 904:	b7 01       	movw	r22, r14
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 90c:	a1 10       	cpse	r10, r1
 90e:	f5 cf       	rjmp	.-22     	; 0x8fa <vfprintf+0x366>
 910:	33 20       	and	r3, r3
 912:	09 f4       	brne	.+2      	; 0x916 <vfprintf+0x382>
 914:	51 ce       	rjmp	.-862    	; 0x5b8 <vfprintf+0x24>
 916:	b7 01       	movw	r22, r14
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 920:	3a 94       	dec	r3
 922:	f6 cf       	rjmp	.-20     	; 0x910 <vfprintf+0x37c>
 924:	f7 01       	movw	r30, r14
 926:	86 81       	ldd	r24, Z+6	; 0x06
 928:	97 81       	ldd	r25, Z+7	; 0x07
 92a:	02 c0       	rjmp	.+4      	; 0x930 <vfprintf+0x39c>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	9f ef       	ldi	r25, 0xFF	; 255
 930:	2c 96       	adiw	r28, 0x0c	; 12
 932:	e2 e1       	ldi	r30, 0x12	; 18
 934:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__epilogue_restores__>

00000938 <strnlen_P>:
 938:	fc 01       	movw	r30, r24
 93a:	05 90       	lpm	r0, Z+
 93c:	61 50       	subi	r22, 0x01	; 1
 93e:	70 40       	sbci	r23, 0x00	; 0
 940:	01 10       	cpse	r0, r1
 942:	d8 f7       	brcc	.-10     	; 0x93a <strnlen_P+0x2>
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	8e 0f       	add	r24, r30
 94a:	9f 1f       	adc	r25, r31
 94c:	08 95       	ret

0000094e <strnlen>:
 94e:	fc 01       	movw	r30, r24
 950:	61 50       	subi	r22, 0x01	; 1
 952:	70 40       	sbci	r23, 0x00	; 0
 954:	01 90       	ld	r0, Z+
 956:	01 10       	cpse	r0, r1
 958:	d8 f7       	brcc	.-10     	; 0x950 <strnlen+0x2>
 95a:	80 95       	com	r24
 95c:	90 95       	com	r25
 95e:	8e 0f       	add	r24, r30
 960:	9f 1f       	adc	r25, r31
 962:	08 95       	ret

00000964 <fputc>:
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	18 2f       	mov	r17, r24
 96e:	09 2f       	mov	r16, r25
 970:	eb 01       	movw	r28, r22
 972:	8b 81       	ldd	r24, Y+3	; 0x03
 974:	81 fd       	sbrc	r24, 1
 976:	03 c0       	rjmp	.+6      	; 0x97e <fputc+0x1a>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	20 c0       	rjmp	.+64     	; 0x9be <fputc+0x5a>
 97e:	82 ff       	sbrs	r24, 2
 980:	10 c0       	rjmp	.+32     	; 0x9a2 <fputc+0x3e>
 982:	4e 81       	ldd	r20, Y+6	; 0x06
 984:	5f 81       	ldd	r21, Y+7	; 0x07
 986:	2c 81       	ldd	r18, Y+4	; 0x04
 988:	3d 81       	ldd	r19, Y+5	; 0x05
 98a:	42 17       	cp	r20, r18
 98c:	53 07       	cpc	r21, r19
 98e:	7c f4       	brge	.+30     	; 0x9ae <fputc+0x4a>
 990:	e8 81       	ld	r30, Y
 992:	f9 81       	ldd	r31, Y+1	; 0x01
 994:	9f 01       	movw	r18, r30
 996:	2f 5f       	subi	r18, 0xFF	; 255
 998:	3f 4f       	sbci	r19, 0xFF	; 255
 99a:	39 83       	std	Y+1, r19	; 0x01
 99c:	28 83       	st	Y, r18
 99e:	10 83       	st	Z, r17
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <fputc+0x4a>
 9a2:	e8 85       	ldd	r30, Y+8	; 0x08
 9a4:	f9 85       	ldd	r31, Y+9	; 0x09
 9a6:	81 2f       	mov	r24, r17
 9a8:	09 95       	icall
 9aa:	89 2b       	or	r24, r25
 9ac:	29 f7       	brne	.-54     	; 0x978 <fputc+0x14>
 9ae:	2e 81       	ldd	r18, Y+6	; 0x06
 9b0:	3f 81       	ldd	r19, Y+7	; 0x07
 9b2:	2f 5f       	subi	r18, 0xFF	; 255
 9b4:	3f 4f       	sbci	r19, 0xFF	; 255
 9b6:	3f 83       	std	Y+7, r19	; 0x07
 9b8:	2e 83       	std	Y+6, r18	; 0x06
 9ba:	81 2f       	mov	r24, r17
 9bc:	90 2f       	mov	r25, r16
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	08 95       	ret

000009c8 <__ultoa_invert>:
 9c8:	fa 01       	movw	r30, r20
 9ca:	aa 27       	eor	r26, r26
 9cc:	28 30       	cpi	r18, 0x08	; 8
 9ce:	51 f1       	breq	.+84     	; 0xa24 <__ultoa_invert+0x5c>
 9d0:	20 31       	cpi	r18, 0x10	; 16
 9d2:	81 f1       	breq	.+96     	; 0xa34 <__ultoa_invert+0x6c>
 9d4:	e8 94       	clt
 9d6:	6f 93       	push	r22
 9d8:	6e 7f       	andi	r22, 0xFE	; 254
 9da:	6e 5f       	subi	r22, 0xFE	; 254
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	af 4f       	sbci	r26, 0xFF	; 255
 9e4:	b1 e0       	ldi	r27, 0x01	; 1
 9e6:	3e d0       	rcall	.+124    	; 0xa64 <__ultoa_invert+0x9c>
 9e8:	b4 e0       	ldi	r27, 0x04	; 4
 9ea:	3c d0       	rcall	.+120    	; 0xa64 <__ultoa_invert+0x9c>
 9ec:	67 0f       	add	r22, r23
 9ee:	78 1f       	adc	r23, r24
 9f0:	89 1f       	adc	r24, r25
 9f2:	9a 1f       	adc	r25, r26
 9f4:	a1 1d       	adc	r26, r1
 9f6:	68 0f       	add	r22, r24
 9f8:	79 1f       	adc	r23, r25
 9fa:	8a 1f       	adc	r24, r26
 9fc:	91 1d       	adc	r25, r1
 9fe:	a1 1d       	adc	r26, r1
 a00:	6a 0f       	add	r22, r26
 a02:	71 1d       	adc	r23, r1
 a04:	81 1d       	adc	r24, r1
 a06:	91 1d       	adc	r25, r1
 a08:	a1 1d       	adc	r26, r1
 a0a:	20 d0       	rcall	.+64     	; 0xa4c <__ultoa_invert+0x84>
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__ultoa_invert+0x48>
 a0e:	68 94       	set
 a10:	3f 91       	pop	r19
 a12:	2a e0       	ldi	r18, 0x0A	; 10
 a14:	26 9f       	mul	r18, r22
 a16:	11 24       	eor	r1, r1
 a18:	30 19       	sub	r19, r0
 a1a:	30 5d       	subi	r19, 0xD0	; 208
 a1c:	31 93       	st	Z+, r19
 a1e:	de f6       	brtc	.-74     	; 0x9d6 <__ultoa_invert+0xe>
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret
 a24:	46 2f       	mov	r20, r22
 a26:	47 70       	andi	r20, 0x07	; 7
 a28:	40 5d       	subi	r20, 0xD0	; 208
 a2a:	41 93       	st	Z+, r20
 a2c:	b3 e0       	ldi	r27, 0x03	; 3
 a2e:	0f d0       	rcall	.+30     	; 0xa4e <__ultoa_invert+0x86>
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__ultoa_invert+0x5c>
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <__ultoa_invert+0x58>
 a34:	46 2f       	mov	r20, r22
 a36:	4f 70       	andi	r20, 0x0F	; 15
 a38:	40 5d       	subi	r20, 0xD0	; 208
 a3a:	4a 33       	cpi	r20, 0x3A	; 58
 a3c:	18 f0       	brcs	.+6      	; 0xa44 <__ultoa_invert+0x7c>
 a3e:	49 5d       	subi	r20, 0xD9	; 217
 a40:	31 fd       	sbrc	r19, 1
 a42:	40 52       	subi	r20, 0x20	; 32
 a44:	41 93       	st	Z+, r20
 a46:	02 d0       	rcall	.+4      	; 0xa4c <__ultoa_invert+0x84>
 a48:	a9 f7       	brne	.-22     	; 0xa34 <__ultoa_invert+0x6c>
 a4a:	ea cf       	rjmp	.-44     	; 0xa20 <__ultoa_invert+0x58>
 a4c:	b4 e0       	ldi	r27, 0x04	; 4
 a4e:	a6 95       	lsr	r26
 a50:	97 95       	ror	r25
 a52:	87 95       	ror	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	ba 95       	dec	r27
 a5a:	c9 f7       	brne	.-14     	; 0xa4e <__ultoa_invert+0x86>
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	61 05       	cpc	r22, r1
 a60:	71 05       	cpc	r23, r1
 a62:	08 95       	ret
 a64:	9b 01       	movw	r18, r22
 a66:	ac 01       	movw	r20, r24
 a68:	0a 2e       	mov	r0, r26
 a6a:	06 94       	lsr	r0
 a6c:	57 95       	ror	r21
 a6e:	47 95       	ror	r20
 a70:	37 95       	ror	r19
 a72:	27 95       	ror	r18
 a74:	ba 95       	dec	r27
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0xa2>
 a78:	62 0f       	add	r22, r18
 a7a:	73 1f       	adc	r23, r19
 a7c:	84 1f       	adc	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	a0 1d       	adc	r26, r0
 a82:	08 95       	ret

00000a84 <__prologue_saves__>:
 a84:	2f 92       	push	r2
 a86:	3f 92       	push	r3
 a88:	4f 92       	push	r4
 a8a:	5f 92       	push	r5
 a8c:	6f 92       	push	r6
 a8e:	7f 92       	push	r7
 a90:	8f 92       	push	r8
 a92:	9f 92       	push	r9
 a94:	af 92       	push	r10
 a96:	bf 92       	push	r11
 a98:	cf 92       	push	r12
 a9a:	df 92       	push	r13
 a9c:	ef 92       	push	r14
 a9e:	ff 92       	push	r15
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
 aac:	ca 1b       	sub	r28, r26
 aae:	db 0b       	sbc	r29, r27
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	f8 94       	cli
 ab4:	de bf       	out	0x3e, r29	; 62
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	cd bf       	out	0x3d, r28	; 61
 aba:	09 94       	ijmp

00000abc <__epilogue_restores__>:
 abc:	2a 88       	ldd	r2, Y+18	; 0x12
 abe:	39 88       	ldd	r3, Y+17	; 0x11
 ac0:	48 88       	ldd	r4, Y+16	; 0x10
 ac2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac8:	8c 84       	ldd	r8, Y+12	; 0x0c
 aca:	9b 84       	ldd	r9, Y+11	; 0x0b
 acc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ace:	b9 84       	ldd	r11, Y+9	; 0x09
 ad0:	c8 84       	ldd	r12, Y+8	; 0x08
 ad2:	df 80       	ldd	r13, Y+7	; 0x07
 ad4:	ee 80       	ldd	r14, Y+6	; 0x06
 ad6:	fd 80       	ldd	r15, Y+5	; 0x05
 ad8:	0c 81       	ldd	r16, Y+4	; 0x04
 ada:	1b 81       	ldd	r17, Y+3	; 0x03
 adc:	aa 81       	ldd	r26, Y+2	; 0x02
 ade:	b9 81       	ldd	r27, Y+1	; 0x01
 ae0:	ce 0f       	add	r28, r30
 ae2:	d1 1d       	adc	r29, r1
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	f8 94       	cli
 ae8:	de bf       	out	0x3e, r29	; 62
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	cd bf       	out	0x3d, r28	; 61
 aee:	ed 01       	movw	r28, r26
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
